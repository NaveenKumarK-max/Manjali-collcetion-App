import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams,ToastController ,LoadingController,Events,ModalController} from 'ionic-angular';
import { CommonProvider } from '../../providers/common';
import { CustomPopupPage } from '../custom-popup/custom-popup';
import { WalletmodalPage } from '../walletmodal/walletmodal';
import { PaymentPage } from '../payment/payment';
import { PaydetailmodalPage } from '../paydetailmodal/paydetailmodal';

/**
 * Generated class for the PayduesPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-paydues',
  templateUrl: 'paydues.html',
})
export class PayduesPage {

  dues:any[] = [];
  wt:any[] = [];
  tog:any[] = [];

  searchData:any[] = [];
  public input: string = '';
  total:any =0;
  wallet:any = 0;
  collect:any[] = [];
  currency:any = '';
  err:any = false;
  gold_rate:any = 0;
  id_wt:any = ''
  id_sc:any = ''

  temp:any[] = [];
  color:any = false;
  dup:any[]= [];

  constructor(public toast:ToastController,public modal:ModalController, public events:Events, public comman:CommonProvider,public load:LoadingController,public navCtrl: NavController, public navParams: NavParams) {

    let user = false;

    let loader = this.load.create({
      content: 'Please Wait',
      spinner: 'dots',
    });
    loader.present();

    this.comman.getwt().then(data=>{

      this.wt = data;
      this.gold_rate = parseFloat(
        data.rates.goldrate_22ct
      ).toFixed(2);
    })
    this.comman.getcurrency().then(data=>{

        this.currency = data;
    })
   
    this.comman.myschemes().then(data=>{

      data['chits'].forEach((element,i) => {
        
        var newNum = "cc";
        var newNum2 = "sub";
        var newNum3 = "err";
        var newNum4 = "gstcalc";
        var newNum5 = "prev";
        var newNum6 = "read";



        var newVal = false;
        var newVal2 = null;
        var newVal3 = false;
        var newVal4 = 0;
        var newVal6 = true;


        data['chits'][i][newNum] = newVal;
        data['chits'][i][newNum2] = newVal2;
        data['chits'][i][newNum3] = newVal3;
        data['chits'][i][newNum4] = newVal4;
        data['chits'][i][newNum5] = element['payable'];
        data['chits'][i][newNum6] = newVal6;


      });
      console.log( data['chits'])
      this.dues = data['chits']
      this.searchData = data['chits']

      this.dup = data['chits']

      localStorage.setItem('dup',JSON.stringify(this.dup))

      this.wallet = data['wallet_balance']['wal_balance'];
      console.log(data)
      loader.dismiss();
      
    })
  }
  ionViewDidLoad(){
    
  }

  ionViewWillEnter() {
    let user = false;

    this.events.publish('user:created', user);
  }
  ionViewWillLeave() {
    let user = true;

    this.events.publish('user:created', user);
  }
  search() {

    
    
    this.dues = this.searchData.filter(item => item['chit_number'].toUpperCase().includes(this.input.toUpperCase()));
  }
  calc(index,data){

      if(this.tog[index] == true){

        if(this.dues[index]['scheme_type'] != 1){

          this.dues[index]['read'] = false;
          this.dues[index]['gstcalc'] = parseInt(this.dues[index]['payable'] ) * parseInt(this.dues[index]['gst'] ) / 100;
        this.collect.push(this.dues[index])
        this.total += parseInt(this.dues[index]['payable']) * parseInt(this.dues[index]['sel_due']);

        }
        else if(this.dues[index]['scheme_type'] == 1){
          this.dues[index]['gstcalc'] = parseInt(this.dues[index]['max_wgt_rate'] ) * parseInt(this.dues[index]['gst'] ) / 100;

          this.collect.push(this.dues[index])
          this.total += parseInt(this.dues[index]['max_wgt_rate']) * parseInt(this.dues[index]['sel_due']);

          }
      

      }
      else{
        if(this.dues[index]['scheme_type'] != 1){
          this.dues[index]['read'] = true;

          let indexx: number = this.collect.indexOf( data );
          if ( indexx !== -1 ) {
              this.collect.splice( indexx, 1 );
              this.total -= parseInt(this.dues[index]['payable']) * parseInt(this.dues[index]['sel_due']);

          }
      }
      else if(this.dues[index]['scheme_type'] == 1 && this.dues[index]['is_flexible_wgt'] == 0){
        let indexx: number = this.collect.indexOf( data );
        if ( indexx !== -1 ) {
            this.collect.splice( indexx, 1 );
            this.total -= parseInt(this.dues[index]['max_wgt_rate']) * parseInt(this.dues[index]['sel_due']);

        }
      }
      else if(this.dues[index]['scheme_type'] == 1 && this.dues[index]['is_flexible_wgt'] == 1){

        let indexx: number = this.collect.indexOf( data );
        if ( indexx !== -1 ) {
            this.collect.splice( indexx, 1 );
            this.total -= parseInt(this.dues[index]['max_wgt_rate']) * parseInt(this.dues[index]['sel_due']);

        }
        let wrate = JSON.parse(localStorage.getItem('dup'))[index]['max_wgt_rate'];
        let wwt = JSON.parse(localStorage.getItem('dup'))[index]['max_weight'];

        this.dues[index]['max_wgt_rate'] = wrate;
        this.dues[index]['max_weight'] = wwt;
        this.color = false;
        this.dues[index]['cc'] = false;
        this.dues[index]['sub'] = null;
        console.log(JSON.parse(localStorage.getItem('dup'))[index]);
        console.log(this.dues[index]['max_wgt_rate']);
     
    }
      
    }
    
  }
  add(i,data){
    let indexx: number = this.collect.indexOf( data );
    if ( indexx !== -1 ) {
      if(this.dues[i]['scheme_type'] != 1){
      this.dues[i]['sel_due'] = this.dues[i]['sel_due'] + 1; 
      this.total += parseInt(this.dues[i]['payable']) ;
    
      }
      else if(this.dues[i]['scheme_type'] == 1){
        this.dues[i]['sel_due'] = this.dues[i]['sel_due'] + 1; 

        this.total += parseInt(this.dues[i]['max_wgt_rate']) ;
        
       
        }
    
    }
    else{
      let ctrl = this.toast.create({
        message:  'Enable Scheme(s) to Proceed',
        duration: 1000,
        position: 'bottom'
      }); 
      ctrl.present();
      
    }



  }
  remove(i,data){
    let indexx: number = this.collect.indexOf( data );
    if ( indexx !== -1 ) {
    if(this.dues[i]['sel_due'] > 1){
      if(this.dues[i]['scheme_type'] != 1){
     
    this.dues[i]['sel_due'] =  parseInt(this.dues[i]['sel_due']) - 1;
    this.collect.splice( indexx, 1 );
    this.total -= parseInt(this.dues[i]['payable']) ;
      }
       
      else if(this.dues[i]['scheme_type'] == 1){

        this.dues[i]['sel_due'] =  parseInt(this.dues[i]['sel_due']) - 1;
        this.collect.splice( indexx, 1 );

        this.total -= parseInt(this.dues[i]['max_wgt_rate']) ;
        
          }
     

    }
  }
  else{
    let ctrl = this.toast.create({
      message:  'Enable Scheme(s) to Proceed',
      duration: 1000,
      position: 'bottom'
    }); 
    ctrl.present();
    
  }

  }
  flex(data,i,details,idx){

    // this.i


    let indexx: number = this.collect.indexOf( details );
    if ( indexx !== -1 ) {
    
      this.color = true;
      this.dues[i]['cc'] = true;
      this.dues[i]['sub'] = idx;

      this.total -= parseInt(this.dues[i]['max_wgt_rate']) * parseInt(this.dues[i]['sel_due']);

    this.id_wt = data['id_weight'];
    this.id_sc = details['id_scheme_account'];

    this.dues[i]['max_weight'] = data['weight']
    this.dues[i]['max_wgt_rate'] = data['rate']
    this.dues[i]['gstcalc'] = parseInt(this.dues[i]['max_wgt_rate'] ) * parseInt(this.dues[i]['gst'] ) / 100;

    this.collect.forEach((d,idx)=>{

      if(data['id_scheme_account'] == d['id_scheme_account'] )
      {
      this.collect[idx]['max_weight'] = data['weight']
      this.collect[idx]['max_wgt_rate'] = data['rate']
      this.collect[idx]['gstcalc'] = parseInt(this.collect[idx]['max_wgt_rate'] ) * parseInt(this.collect[idx]['gst'] ) / 100;


      }
    })
    this.total += parseInt(this.dues[i]['max_wgt_rate']) * parseInt(this.dues[i]['sel_due']);
    console.log(this.collect)

  }
  else{
    this.color = false;
    let ctrl = this.toast.create({
      message:  'Enable Scheme(s) to Proceed',
      duration: 1000,
      position: 'bottom'
    }); 
    ctrl.present();
  }



  }
  pop(i){

    console.log(i)
    let mod =   this.modal.create(CustomPopupPage,{data:i})
    mod.present();
  }
  check(i,details){

    let indexx: number = this.collect.indexOf( details );

    if ( indexx !== -1 ) {
      

if(this.dues[i].prev <= this.dues[i].max_amount && this.dues[i].prev >= parseInt(this.dues[i].min_amount)){

  this.dues[i]['err'] = false;


    this.total -= parseInt(this.dues[i]['payable']) * parseInt(this.dues[i]['sel_due']);

         this.total += parseInt(this.dues[i]['prev']) * parseInt(this.dues[i]['sel_due']);
        this.dues[i]['payable'] = parseInt(this.dues[i]['prev']) ;
         console.log(this.total)
  }
  else{
    this.dues[i]['err'] = true;
  }
}
else{
  this.color = false;
  let ctrl = this.toast.create({
    message:  'Enable Scheme(s) to Proceed',
    duration: 1000,
    position: 'bottom'
  }); 
  ctrl.present();
}
  

  }
  pay(){

    let mod =   this.modal.create(PaydetailmodalPage,{data:this.collect,total:this.total})
    mod.present();
  
  }
  continue(){

    if(this.collect.length > 0){
    

      if(this.wallet == 0){
        this.navCtrl.push(PaymentPage,{data:this.total,detail:this.collect,payable:this.total})

      }
      else{
        let mod =   this.modal.create(WalletmodalPage,{data:this.total,detail:this.collect,payable:this.total});
        mod.present();
      }

    }
    else{
      let ctrl = this.toast.create({
        message:  'Select Scheme(s) to Proceed',
        duration: 1000,
        position: 'bottom'
      }); 
      ctrl.present();
    }
    

   
  }

}
