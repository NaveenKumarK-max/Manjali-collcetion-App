import * as i0 from '@angular/core';
import { Injectable, Inject, Component, Input, NgModule } from '@angular/core';
import { throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i1 from '@angular/common/http';
import { HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

var Angular2PrestaImageSize;
(function (Angular2PrestaImageSize) {
    Angular2PrestaImageSize["cart"] = "cart_default";
    Angular2PrestaImageSize["small"] = "small_default";
    Angular2PrestaImageSize["medium"] = "medium_default";
    Angular2PrestaImageSize["large"] = "large_default";
    Angular2PrestaImageSize["thickbox"] = "thickbox_default";
    Angular2PrestaImageSize["home"] = "home_default";
    Angular2PrestaImageSize["category"] = "category_default";
})(Angular2PrestaImageSize || (Angular2PrestaImageSize = {}));

class Angular2PrestaService {
    constructor(config, http) {
        this.config = config;
        this.http = http;
        this.TAG = "Angular2Presta: ";
    }
    /*
     * [requestConstructor : analyze Query object, construct and return request url]
     * @param  {PrestaQuery}  q [Query object]
     * @return {[string]}   [request url]
     */
    requestConstructor(q) {
        // check if params are set, if not set default values
        if (!q.resource) {
            q.resource = "products";
        }
        // Check if display is set if not return results with all properties
        !q.display
            ? (q.display = `&display=full`)
            : (q.display = `&display=[${q.display}]`);
        // Generate filter query from Query.filter object if it is defined
        let filterQuery = "";
        if (q.filter) {
            for (const property in q.filter) {
                if (property) {
                    filterQuery += `&filter[${property}]=[${q.filter[property]}]`;
                }
            }
        }
        !q.sort ? (q.sort = "") : (q.sort = `&sort=[${q.sort}]`);
        !q.limit ? (q.limit = "") : (q.limit = `&limit=${q.limit}`);
        if (!q.search) {
            return (this.config.shopUrl +
                q.resource +
                "?ws_key=" +
                this.config.apiKey +
                "&output_format=JSON" +
                q.display +
                filterQuery +
                q.sort +
                q.limit);
        }
        else {
            return (this.config.shopUrl +
                "search" +
                "?ws_key=" +
                this.config.apiKey +
                "&output_format=JSON&language=1" +
                q.display +
                filterQuery +
                "&query=" +
                q.search);
        }
    }
    fetchForm(resource) {
        return this.http.get(`${this.config.shopUrl}${resource}?schema=blank&ws_key=${this.config.apiKey}`, { responseType: "text" });
    }
    /*
     * [get results from presta shop web service]
     * @param  {PrestaQuery}           q [query object]
     * @return {Observable<any>}   [results object array]
     */
    get(q) {
        return this.http.get(this.requestConstructor(q)).pipe(map((resp) => resp[q.resource]), catchError(this.handleError));
    }
    delete(resource, resourceId) {
        return this.http.delete(`${this.config.shopUrl}${resource}/${resourceId}?ws_key=${this.config.apiKey}`);
    }
    /*
     * [search]
     * @param  {PrestaQuery}           q [query object with search term provided]
     * @return {Observable<Response>}   [return results object array]
     */
    search(q) {
        return this.http.get(this.requestConstructor(q)).pipe(map((resp) => resp[q.resource]), catchError(this.handleError));
    }
    /*
     * [getImage used by PrestaImage component to get images from Presta Shop Web Service]
     * @param  {string} resource   [general, products, categories, manufacturers, suppliers, stores]
     * @param  {number} resourceID [ID of resurce to get images for]
     * @param  {number} imageID    [ID of image to get]
     * @param  {string} imageSize  [cart, small, medium, large, thickbox, home, category]
     * @return {string}            [url]
     */
    getImage(resource, resourceID, imageID, imageSize) {
        // check if imageApiKey is defined if not use default apiKey (not recomended for security reasons)
        let key = "";
        !this.config.imageApiKey
            ? (key = this.config.apiKey)
            : (key = this.config.imageApiKey);
        // check if image size is defined if not get large images by default
        if (!imageSize) {
            imageSize = Angular2PrestaImageSize.large;
        }
        if (resource === "products") {
            return (this.config.shopUrl +
                "images/" +
                resource +
                "/" +
                resourceID +
                "/" +
                imageID +
                "/" +
                Angular2PrestaImageSize[imageSize] +
                "?ws_key=" +
                key);
        }
        else {
            return (this.config.shopUrl +
                "images/" +
                resource +
                "/" +
                resourceID +
                "?ws_key=" +
                key);
        }
    }
    handleError(error) {
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            console.error(this.TAG + "An error occurred:", error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            console.error(`${this.TAG} Backend returned code ${error.status}, ` +
                `body was: ${error.error}`);
        }
        // return an observable with a user-facing error message
        return throwError(`${this.TAG} Something bad happened; please try again later.`);
    }
}
Angular2PrestaService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaService, deps: [{ token: "prestaConfiguration" }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
Angular2PrestaService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root",
                }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: ["prestaConfiguration"]
                    }] }, { type: i1.HttpClient }];
    } });

class Angular2PrestaImageComponent {
    constructor(_a2ps) {
        this._a2ps = _a2ps;
    }
    ngOnInit() {
        this.image = this._a2ps.getImage(this.resource, this.resourceID, this.imageID, this.size);
    }
}
Angular2PrestaImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaImageComponent, deps: [{ token: Angular2PrestaService }], target: i0.ɵɵFactoryTarget.Component });
Angular2PrestaImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.0", type: Angular2PrestaImageComponent, selector: "a2p-image", inputs: { resource: "resource", resourceID: "resourceID", imageID: "imageID", size: "size" }, ngImport: i0, template: `<img class="presta-image" [src]="image" />`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'a2p-image', template: `<img class="presta-image" [src]="image" />` }]
        }], ctorParameters: function () { return [{ type: Angular2PrestaService }]; }, propDecorators: { resource: [{
                type: Input
            }], resourceID: [{
                type: Input
            }], imageID: [{
                type: Input
            }], size: [{
                type: Input
            }] } });

class Angular2PrestaModule {
    static forRoot(prestaConfiguration) {
        return {
            ngModule: Angular2PrestaModule,
            providers: [
                Angular2PrestaService,
                { provide: "prestaConfiguration", useValue: prestaConfiguration },
            ],
        };
    }
}
Angular2PrestaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
Angular2PrestaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaModule, declarations: [Angular2PrestaImageComponent], imports: [CommonModule, HttpClientModule], exports: [Angular2PrestaImageComponent] });
Angular2PrestaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaModule, imports: [CommonModule, HttpClientModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: Angular2PrestaModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, HttpClientModule],
                    declarations: [Angular2PrestaImageComponent],
                    exports: [Angular2PrestaImageComponent],
                }]
        }] });

/*
 * Public API Surface of angular2-presta
 */

/**
 * Generated bundle index. Do not edit.
 */

export { Angular2PrestaImageComponent, Angular2PrestaImageSize, Angular2PrestaModule, Angular2PrestaService };
//# sourceMappingURL=angular2-presta.mjs.map
